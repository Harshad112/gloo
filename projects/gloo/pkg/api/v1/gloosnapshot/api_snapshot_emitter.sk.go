// Code generated by solo-kit. DO NOT EDIT.

package gloosnapshot

import (
	"sync"
	"time"

	gateway_solo_io "github.com/solo-io/gloo/projects/gateway/pkg/api/v1"
	github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/external/solo/ratelimit"
	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	enterprise_gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	graphql_gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/graphql/v1beta1"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"
	"go.uber.org/zap"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
	skstats "github.com/solo-io/solo-kit/pkg/stats"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/go-utils/errutils"
)

var (
	// Deprecated. See mApiResourcesIn
	mApiSnapshotIn = stats.Int64("api.gloosnapshot.gloo.solo.io/emitter/snap_in", "Deprecated. Use api.gloosnapshot.gloo.solo.io/emitter/resources_in. The number of snapshots in", "1")

	// metrics for emitter
	mApiResourcesIn    = stats.Int64("api.gloosnapshot.gloo.solo.io/emitter/resources_in", "The number of resource lists received on open watch channels", "1")
	mApiSnapshotOut    = stats.Int64("api.gloosnapshot.gloo.solo.io/emitter/snap_out", "The number of snapshots out", "1")
	mApiSnapshotMissed = stats.Int64("api.gloosnapshot.gloo.solo.io/emitter/snap_missed", "The number of snapshots missed", "1")

	// views for emitter
	// deprecated: see apiResourcesInView
	apisnapshotInView = &view.View{
		Name:        "api.gloosnapshot.gloo.solo.io/emitter/snap_in",
		Measure:     mApiSnapshotIn,
		Description: "Deprecated. Use api.gloosnapshot.gloo.solo.io/emitter/resources_in. The number of snapshots updates coming in.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}

	apiResourcesInView = &view.View{
		Name:        "api.gloosnapshot.gloo.solo.io/emitter/resources_in",
		Measure:     mApiResourcesIn,
		Description: "The number of resource lists received on open watch channels",
		Aggregation: view.Count(),
		TagKeys: []tag.Key{
			skstats.NamespaceKey,
			skstats.ResourceKey,
		},
	}
	apisnapshotOutView = &view.View{
		Name:        "api.gloosnapshot.gloo.solo.io/emitter/snap_out",
		Measure:     mApiSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	apisnapshotMissedView = &view.View{
		Name:        "api.gloosnapshot.gloo.solo.io/emitter/snap_missed",
		Measure:     mApiSnapshotMissed,
		Description: "The number of snapshots updates going missed. this can happen in heavy load. missed snapshot will be re-tried after a second.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(
		apisnapshotInView,
		apisnapshotOutView,
		apisnapshotMissedView,
		apiResourcesInView,
	)
}

type ApiSnapshotEmitter interface {
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ApiSnapshot, <-chan error, error)
}

type ApiEmitter interface {
	ApiSnapshotEmitter
	Register() error
	Artifact() gloo_solo_io.ArtifactClient
	Endpoint() gloo_solo_io.EndpointClient
	Proxy() gloo_solo_io.ProxyClient
	UpstreamGroup() gloo_solo_io.UpstreamGroupClient
	Secret() gloo_solo_io.SecretClient
	Upstream() gloo_solo_io.UpstreamClient
	AuthConfig() enterprise_gloo_solo_io.AuthConfigClient
	RateLimitConfig() github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigClient
	VirtualService() gateway_solo_io.VirtualServiceClient
	RouteTable() gateway_solo_io.RouteTableClient
	Gateway() gateway_solo_io.GatewayClient
	VirtualHostOption() gateway_solo_io.VirtualHostOptionClient
	RouteOption() gateway_solo_io.RouteOptionClient
	MatchableHttpGateway() gateway_solo_io.MatchableHttpGatewayClient
	GraphQLApi() graphql_gloo_solo_io.GraphQLApiClient
}

func NewApiEmitter(artifactClient gloo_solo_io.ArtifactClient, endpointClient gloo_solo_io.EndpointClient, proxyClient gloo_solo_io.ProxyClient, upstreamGroupClient gloo_solo_io.UpstreamGroupClient, secretClient gloo_solo_io.SecretClient, upstreamClient gloo_solo_io.UpstreamClient, authConfigClient enterprise_gloo_solo_io.AuthConfigClient, rateLimitConfigClient github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigClient, virtualServiceClient gateway_solo_io.VirtualServiceClient, routeTableClient gateway_solo_io.RouteTableClient, gatewayClient gateway_solo_io.GatewayClient, virtualHostOptionClient gateway_solo_io.VirtualHostOptionClient, routeOptionClient gateway_solo_io.RouteOptionClient, matchableHttpGatewayClient gateway_solo_io.MatchableHttpGatewayClient, graphQLApiClient graphql_gloo_solo_io.GraphQLApiClient, resourceNamespaceLister resources.ResourceNamespaceLister) ApiEmitter {
	return NewApiEmitterWithEmit(artifactClient, endpointClient, proxyClient, upstreamGroupClient, secretClient, upstreamClient, authConfigClient, rateLimitConfigClient, virtualServiceClient, routeTableClient, gatewayClient, virtualHostOptionClient, routeOptionClient, matchableHttpGatewayClient, graphQLApiClient, resourceNamespaceLister, make(chan struct{}))
}

func NewApiEmitterWithEmit(artifactClient gloo_solo_io.ArtifactClient, endpointClient gloo_solo_io.EndpointClient, proxyClient gloo_solo_io.ProxyClient, upstreamGroupClient gloo_solo_io.UpstreamGroupClient, secretClient gloo_solo_io.SecretClient, upstreamClient gloo_solo_io.UpstreamClient, authConfigClient enterprise_gloo_solo_io.AuthConfigClient, rateLimitConfigClient github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigClient, virtualServiceClient gateway_solo_io.VirtualServiceClient, routeTableClient gateway_solo_io.RouteTableClient, gatewayClient gateway_solo_io.GatewayClient, virtualHostOptionClient gateway_solo_io.VirtualHostOptionClient, routeOptionClient gateway_solo_io.RouteOptionClient, matchableHttpGatewayClient gateway_solo_io.MatchableHttpGatewayClient, graphQLApiClient graphql_gloo_solo_io.GraphQLApiClient, resourceNamespaceLister resources.ResourceNamespaceLister, emit <-chan struct{}) ApiEmitter {
	return &apiEmitter{
		artifact:                artifactClient,
		endpoint:                endpointClient,
		proxy:                   proxyClient,
		upstreamGroup:           upstreamGroupClient,
		secret:                  secretClient,
		upstream:                upstreamClient,
		authConfig:              authConfigClient,
		rateLimitConfig:         rateLimitConfigClient,
		virtualService:          virtualServiceClient,
		routeTable:              routeTableClient,
		gateway:                 gatewayClient,
		virtualHostOption:       virtualHostOptionClient,
		routeOption:             routeOptionClient,
		matchableHttpGateway:    matchableHttpGatewayClient,
		graphQLApi:              graphQLApiClient,
		resourceNamespaceLister: resourceNamespaceLister,
		forceEmit:               emit,
	}
}

type apiEmitter struct {
	forceEmit            <-chan struct{}
	artifact             gloo_solo_io.ArtifactClient
	endpoint             gloo_solo_io.EndpointClient
	proxy                gloo_solo_io.ProxyClient
	upstreamGroup        gloo_solo_io.UpstreamGroupClient
	secret               gloo_solo_io.SecretClient
	upstream             gloo_solo_io.UpstreamClient
	authConfig           enterprise_gloo_solo_io.AuthConfigClient
	rateLimitConfig      github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigClient
	virtualService       gateway_solo_io.VirtualServiceClient
	routeTable           gateway_solo_io.RouteTableClient
	gateway              gateway_solo_io.GatewayClient
	virtualHostOption    gateway_solo_io.VirtualHostOptionClient
	routeOption          gateway_solo_io.RouteOptionClient
	matchableHttpGateway gateway_solo_io.MatchableHttpGatewayClient
	graphQLApi           graphql_gloo_solo_io.GraphQLApiClient
	// resourceNamespaceLister is used to watch for new namespaces when they are created.
	// It is used when Expression Selector is in the Watch Opts set in Snapshot().
	resourceNamespaceLister resources.ResourceNamespaceLister
	// namespacesWatching is the set of namespaces that we are watching. This is helpful
	// when Expression Selector is set on the Watch Opts in Snapshot().
	namespacesWatching sync.Map
	// updateNamespaces is used to perform locks and unlocks when watches on namespaces are being updated/created
	updateNamespaces sync.Mutex
}

func (c *apiEmitter) Register() error {
	if err := c.artifact.Register(); err != nil {
		return err
	}
	if err := c.endpoint.Register(); err != nil {
		return err
	}
	if err := c.proxy.Register(); err != nil {
		return err
	}
	if err := c.upstreamGroup.Register(); err != nil {
		return err
	}
	if err := c.secret.Register(); err != nil {
		return err
	}
	if err := c.upstream.Register(); err != nil {
		return err
	}
	if err := c.authConfig.Register(); err != nil {
		return err
	}
	if err := c.rateLimitConfig.Register(); err != nil {
		return err
	}
	if err := c.virtualService.Register(); err != nil {
		return err
	}
	if err := c.routeTable.Register(); err != nil {
		return err
	}
	if err := c.gateway.Register(); err != nil {
		return err
	}
	if err := c.virtualHostOption.Register(); err != nil {
		return err
	}
	if err := c.routeOption.Register(); err != nil {
		return err
	}
	if err := c.matchableHttpGateway.Register(); err != nil {
		return err
	}
	if err := c.graphQLApi.Register(); err != nil {
		return err
	}
	return nil
}

func (c *apiEmitter) Artifact() gloo_solo_io.ArtifactClient {
	return c.artifact
}

func (c *apiEmitter) Endpoint() gloo_solo_io.EndpointClient {
	return c.endpoint
}

func (c *apiEmitter) Proxy() gloo_solo_io.ProxyClient {
	return c.proxy
}

func (c *apiEmitter) UpstreamGroup() gloo_solo_io.UpstreamGroupClient {
	return c.upstreamGroup
}

func (c *apiEmitter) Secret() gloo_solo_io.SecretClient {
	return c.secret
}

func (c *apiEmitter) Upstream() gloo_solo_io.UpstreamClient {
	return c.upstream
}

func (c *apiEmitter) AuthConfig() enterprise_gloo_solo_io.AuthConfigClient {
	return c.authConfig
}

func (c *apiEmitter) RateLimitConfig() github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigClient {
	return c.rateLimitConfig
}

func (c *apiEmitter) VirtualService() gateway_solo_io.VirtualServiceClient {
	return c.virtualService
}

func (c *apiEmitter) RouteTable() gateway_solo_io.RouteTableClient {
	return c.routeTable
}

func (c *apiEmitter) Gateway() gateway_solo_io.GatewayClient {
	return c.gateway
}

func (c *apiEmitter) VirtualHostOption() gateway_solo_io.VirtualHostOptionClient {
	return c.virtualHostOption
}

func (c *apiEmitter) RouteOption() gateway_solo_io.RouteOptionClient {
	return c.routeOption
}

func (c *apiEmitter) MatchableHttpGateway() gateway_solo_io.MatchableHttpGatewayClient {
	return c.matchableHttpGateway
}

func (c *apiEmitter) GraphQLApi() graphql_gloo_solo_io.GraphQLApiClient {
	return c.graphQLApi
}

// Snapshots will return a channel that can be used to receive snapshots of the
// state of the resources it is watching
// when watching resources, you can set the watchNamespaces, and you can set the
// ExpressionSelector of the WatchOpts.  Setting watchNamespaces will watch for all resources
// that are in the specified namespaces. In addition if ExpressionSelector of the WatchOpts is
// set, then all namespaces that meet the label criteria of the ExpressionSelector will
// also be watched.
func (c *apiEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *ApiSnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	hasWatchedNamespaces := len(watchNamespaces) > 1 || (len(watchNamespaces) == 1 && watchNamespaces[0] != "")
	watchingLabeledNamespaces := !(opts.ExpressionSelector == "")
	var done sync.WaitGroup
	ctx := opts.Ctx

	// setting up the options for both listing and watching resources in namespaces
	watchedNamespacesListOptions := clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector}
	watchedNamespacesWatchOptions := clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector}
	/* Create channel for Artifact */
	type artifactListWithNamespace struct {
		list      gloo_solo_io.ArtifactList
		namespace string
	}
	artifactChan := make(chan artifactListWithNamespace)
	var initialArtifactList gloo_solo_io.ArtifactList
	/* Create channel for Endpoint */
	type endpointListWithNamespace struct {
		list      gloo_solo_io.EndpointList
		namespace string
	}
	endpointChan := make(chan endpointListWithNamespace)
	var initialEndpointList gloo_solo_io.EndpointList
	/* Create channel for Proxy */
	type proxyListWithNamespace struct {
		list      gloo_solo_io.ProxyList
		namespace string
	}
	proxyChan := make(chan proxyListWithNamespace)
	var initialProxyList gloo_solo_io.ProxyList
	/* Create channel for UpstreamGroup */
	type upstreamGroupListWithNamespace struct {
		list      gloo_solo_io.UpstreamGroupList
		namespace string
	}
	upstreamGroupChan := make(chan upstreamGroupListWithNamespace)
	var initialUpstreamGroupList gloo_solo_io.UpstreamGroupList
	/* Create channel for Secret */
	type secretListWithNamespace struct {
		list      gloo_solo_io.SecretList
		namespace string
	}
	secretChan := make(chan secretListWithNamespace)
	var initialSecretList gloo_solo_io.SecretList
	/* Create channel for Upstream */
	type upstreamListWithNamespace struct {
		list      gloo_solo_io.UpstreamList
		namespace string
	}
	upstreamChan := make(chan upstreamListWithNamespace)
	var initialUpstreamList gloo_solo_io.UpstreamList
	/* Create channel for AuthConfig */
	type authConfigListWithNamespace struct {
		list      enterprise_gloo_solo_io.AuthConfigList
		namespace string
	}
	authConfigChan := make(chan authConfigListWithNamespace)
	var initialAuthConfigList enterprise_gloo_solo_io.AuthConfigList
	/* Create channel for RateLimitConfig */
	type rateLimitConfigListWithNamespace struct {
		list      github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigList
		namespace string
	}
	rateLimitConfigChan := make(chan rateLimitConfigListWithNamespace)
	var initialRateLimitConfigList github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigList
	/* Create channel for VirtualService */
	type virtualServiceListWithNamespace struct {
		list      gateway_solo_io.VirtualServiceList
		namespace string
	}
	virtualServiceChan := make(chan virtualServiceListWithNamespace)
	var initialVirtualServiceList gateway_solo_io.VirtualServiceList
	/* Create channel for RouteTable */
	type routeTableListWithNamespace struct {
		list      gateway_solo_io.RouteTableList
		namespace string
	}
	routeTableChan := make(chan routeTableListWithNamespace)
	var initialRouteTableList gateway_solo_io.RouteTableList
	/* Create channel for Gateway */
	type gatewayListWithNamespace struct {
		list      gateway_solo_io.GatewayList
		namespace string
	}
	gatewayChan := make(chan gatewayListWithNamespace)
	var initialGatewayList gateway_solo_io.GatewayList
	/* Create channel for VirtualHostOption */
	type virtualHostOptionListWithNamespace struct {
		list      gateway_solo_io.VirtualHostOptionList
		namespace string
	}
	virtualHostOptionChan := make(chan virtualHostOptionListWithNamespace)
	var initialVirtualHostOptionList gateway_solo_io.VirtualHostOptionList
	/* Create channel for RouteOption */
	type routeOptionListWithNamespace struct {
		list      gateway_solo_io.RouteOptionList
		namespace string
	}
	routeOptionChan := make(chan routeOptionListWithNamespace)
	var initialRouteOptionList gateway_solo_io.RouteOptionList
	/* Create channel for MatchableHttpGateway */
	type matchableHttpGatewayListWithNamespace struct {
		list      gateway_solo_io.MatchableHttpGatewayList
		namespace string
	}
	matchableHttpGatewayChan := make(chan matchableHttpGatewayListWithNamespace)
	var initialMatchableHttpGatewayList gateway_solo_io.MatchableHttpGatewayList
	/* Create channel for GraphQLApi */
	type graphQLApiListWithNamespace struct {
		list      graphql_gloo_solo_io.GraphQLApiList
		namespace string
	}
	graphQLApiChan := make(chan graphQLApiListWithNamespace)
	var initialGraphQLApiList graphql_gloo_solo_io.GraphQLApiList

	currentSnapshot := ApiSnapshot{}
	artifactsByNamespace := sync.Map{}
	endpointsByNamespace := sync.Map{}
	proxiesByNamespace := sync.Map{}
	upstreamGroupsByNamespace := sync.Map{}
	secretsByNamespace := sync.Map{}
	upstreamsByNamespace := sync.Map{}
	authConfigsByNamespace := sync.Map{}
	ratelimitconfigsByNamespace := sync.Map{}
	virtualServicesByNamespace := sync.Map{}
	routeTablesByNamespace := sync.Map{}
	gatewaysByNamespace := sync.Map{}
	virtualHostOptionsByNamespace := sync.Map{}
	routeOptionsByNamespace := sync.Map{}
	httpGatewaysByNamespace := sync.Map{}
	graphqlApisByNamespace := sync.Map{}
	if hasWatchedNamespaces || !watchingLabeledNamespaces {
		// then watch all resources on watch Namespaces

		// watched namespaces
		for _, namespace := range watchNamespaces {
			/* Setup namespaced watch for Artifact */
			{
				artifacts, err := c.artifact.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Artifact list")
				}
				initialArtifactList = append(initialArtifactList, artifacts...)
				artifactsByNamespace.Store(namespace, artifacts)
			}
			artifactNamespacesChan, artifactErrs, err := c.artifact.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Artifact watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, artifactErrs, namespace+"-artifacts")
			}(namespace)
			/* Setup namespaced watch for Endpoint */
			{
				endpoints, err := c.endpoint.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Endpoint list")
				}
				initialEndpointList = append(initialEndpointList, endpoints...)
				endpointsByNamespace.Store(namespace, endpoints)
			}
			endpointNamespacesChan, endpointErrs, err := c.endpoint.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Endpoint watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, endpointErrs, namespace+"-endpoints")
			}(namespace)
			/* Setup namespaced watch for Proxy */
			{
				proxies, err := c.proxy.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Proxy list")
				}
				initialProxyList = append(initialProxyList, proxies...)
				proxiesByNamespace.Store(namespace, proxies)
			}
			proxyNamespacesChan, proxyErrs, err := c.proxy.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Proxy watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, proxyErrs, namespace+"-proxies")
			}(namespace)
			/* Setup namespaced watch for UpstreamGroup */
			{
				upstreamGroups, err := c.upstreamGroup.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial UpstreamGroup list")
				}
				initialUpstreamGroupList = append(initialUpstreamGroupList, upstreamGroups...)
				upstreamGroupsByNamespace.Store(namespace, upstreamGroups)
			}
			upstreamGroupNamespacesChan, upstreamGroupErrs, err := c.upstreamGroup.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting UpstreamGroup watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, upstreamGroupErrs, namespace+"-upstreamGroups")
			}(namespace)
			/* Setup namespaced watch for Secret */
			{
				secrets, err := c.secret.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Secret list")
				}
				initialSecretList = append(initialSecretList, secrets...)
				secretsByNamespace.Store(namespace, secrets)
			}
			secretNamespacesChan, secretErrs, err := c.secret.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Secret watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, secretErrs, namespace+"-secrets")
			}(namespace)
			/* Setup namespaced watch for Upstream */
			{
				upstreams, err := c.upstream.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Upstream list")
				}
				initialUpstreamList = append(initialUpstreamList, upstreams...)
				upstreamsByNamespace.Store(namespace, upstreams)
			}
			upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Upstream watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-upstreams")
			}(namespace)
			/* Setup namespaced watch for AuthConfig */
			{
				authConfigs, err := c.authConfig.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial AuthConfig list")
				}
				initialAuthConfigList = append(initialAuthConfigList, authConfigs...)
				authConfigsByNamespace.Store(namespace, authConfigs)
			}
			authConfigNamespacesChan, authConfigErrs, err := c.authConfig.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting AuthConfig watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, authConfigErrs, namespace+"-authConfigs")
			}(namespace)
			/* Setup namespaced watch for RateLimitConfig */
			{
				ratelimitconfigs, err := c.rateLimitConfig.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RateLimitConfig list")
				}
				initialRateLimitConfigList = append(initialRateLimitConfigList, ratelimitconfigs...)
				ratelimitconfigsByNamespace.Store(namespace, ratelimitconfigs)
			}
			rateLimitConfigNamespacesChan, rateLimitConfigErrs, err := c.rateLimitConfig.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RateLimitConfig watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, rateLimitConfigErrs, namespace+"-ratelimitconfigs")
			}(namespace)
			/* Setup namespaced watch for VirtualService */
			{
				virtualServices, err := c.virtualService.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial VirtualService list")
				}
				initialVirtualServiceList = append(initialVirtualServiceList, virtualServices...)
				virtualServicesByNamespace.Store(namespace, virtualServices)
			}
			virtualServiceNamespacesChan, virtualServiceErrs, err := c.virtualService.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting VirtualService watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, virtualServiceErrs, namespace+"-virtualServices")
			}(namespace)
			/* Setup namespaced watch for RouteTable */
			{
				routeTables, err := c.routeTable.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RouteTable list")
				}
				initialRouteTableList = append(initialRouteTableList, routeTables...)
				routeTablesByNamespace.Store(namespace, routeTables)
			}
			routeTableNamespacesChan, routeTableErrs, err := c.routeTable.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RouteTable watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, routeTableErrs, namespace+"-routeTables")
			}(namespace)
			/* Setup namespaced watch for Gateway */
			{
				gateways, err := c.gateway.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Gateway list")
				}
				initialGatewayList = append(initialGatewayList, gateways...)
				gatewaysByNamespace.Store(namespace, gateways)
			}
			gatewayNamespacesChan, gatewayErrs, err := c.gateway.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Gateway watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, gatewayErrs, namespace+"-gateways")
			}(namespace)
			/* Setup namespaced watch for VirtualHostOption */
			{
				virtualHostOptions, err := c.virtualHostOption.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial VirtualHostOption list")
				}
				initialVirtualHostOptionList = append(initialVirtualHostOptionList, virtualHostOptions...)
				virtualHostOptionsByNamespace.Store(namespace, virtualHostOptions)
			}
			virtualHostOptionNamespacesChan, virtualHostOptionErrs, err := c.virtualHostOption.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting VirtualHostOption watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, virtualHostOptionErrs, namespace+"-virtualHostOptions")
			}(namespace)
			/* Setup namespaced watch for RouteOption */
			{
				routeOptions, err := c.routeOption.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RouteOption list")
				}
				initialRouteOptionList = append(initialRouteOptionList, routeOptions...)
				routeOptionsByNamespace.Store(namespace, routeOptions)
			}
			routeOptionNamespacesChan, routeOptionErrs, err := c.routeOption.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RouteOption watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, routeOptionErrs, namespace+"-routeOptions")
			}(namespace)
			/* Setup namespaced watch for MatchableHttpGateway */
			{
				httpGateways, err := c.matchableHttpGateway.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial MatchableHttpGateway list")
				}
				initialMatchableHttpGatewayList = append(initialMatchableHttpGatewayList, httpGateways...)
				httpGatewaysByNamespace.Store(namespace, httpGateways)
			}
			matchableHttpGatewayNamespacesChan, matchableHttpGatewayErrs, err := c.matchableHttpGateway.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting MatchableHttpGateway watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, matchableHttpGatewayErrs, namespace+"-httpGateways")
			}(namespace)
			/* Setup namespaced watch for GraphQLApi */
			{
				graphqlApis, err := c.graphQLApi.List(namespace, watchedNamespacesListOptions)
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial GraphQLApi list")
				}
				initialGraphQLApiList = append(initialGraphQLApiList, graphqlApis...)
				graphqlApisByNamespace.Store(namespace, graphqlApis)
			}
			graphQLApiNamespacesChan, graphQLApiErrs, err := c.graphQLApi.Watch(namespace, watchedNamespacesWatchOptions)
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting GraphQLApi watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, graphQLApiErrs, namespace+"-graphqlApis")
			}(namespace)
			/* Watch for changes and update snapshot */
			go func(namespace string) {
				defer func() {
					c.namespacesWatching.Delete(namespace)
				}()
				c.namespacesWatching.Store(namespace, true)
				for {
					select {
					case <-ctx.Done():
						return
					case artifactList, ok := <-artifactNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case artifactChan <- artifactListWithNamespace{list: artifactList, namespace: namespace}:
						}
					case endpointList, ok := <-endpointNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case endpointChan <- endpointListWithNamespace{list: endpointList, namespace: namespace}:
						}
					case proxyList, ok := <-proxyNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case proxyChan <- proxyListWithNamespace{list: proxyList, namespace: namespace}:
						}
					case upstreamGroupList, ok := <-upstreamGroupNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case upstreamGroupChan <- upstreamGroupListWithNamespace{list: upstreamGroupList, namespace: namespace}:
						}
					case secretList, ok := <-secretNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case secretChan <- secretListWithNamespace{list: secretList, namespace: namespace}:
						}
					case upstreamList, ok := <-upstreamNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
						}
					case authConfigList, ok := <-authConfigNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case authConfigChan <- authConfigListWithNamespace{list: authConfigList, namespace: namespace}:
						}
					case rateLimitConfigList, ok := <-rateLimitConfigNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case rateLimitConfigChan <- rateLimitConfigListWithNamespace{list: rateLimitConfigList, namespace: namespace}:
						}
					case virtualServiceList, ok := <-virtualServiceNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case virtualServiceChan <- virtualServiceListWithNamespace{list: virtualServiceList, namespace: namespace}:
						}
					case routeTableList, ok := <-routeTableNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case routeTableChan <- routeTableListWithNamespace{list: routeTableList, namespace: namespace}:
						}
					case gatewayList, ok := <-gatewayNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case gatewayChan <- gatewayListWithNamespace{list: gatewayList, namespace: namespace}:
						}
					case virtualHostOptionList, ok := <-virtualHostOptionNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case virtualHostOptionChan <- virtualHostOptionListWithNamespace{list: virtualHostOptionList, namespace: namespace}:
						}
					case routeOptionList, ok := <-routeOptionNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case routeOptionChan <- routeOptionListWithNamespace{list: routeOptionList, namespace: namespace}:
						}
					case matchableHttpGatewayList, ok := <-matchableHttpGatewayNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case matchableHttpGatewayChan <- matchableHttpGatewayListWithNamespace{list: matchableHttpGatewayList, namespace: namespace}:
						}
					case graphQLApiList, ok := <-graphQLApiNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case graphQLApiChan <- graphQLApiListWithNamespace{list: graphQLApiList, namespace: namespace}:
						}
					}
				}
			}(namespace)
		}
	}
	// watch all other namespaces that are labeled and fit the Expression Selector
	if opts.ExpressionSelector != "" {
		// watch resources of non-watched namespaces that fit the expression selectors
		namespaceListOptions := resources.ResourceNamespaceListOptions{
			Ctx:                opts.Ctx,
			ExpressionSelector: opts.ExpressionSelector,
		}
		namespaceWatchOptions := resources.ResourceNamespaceWatchOptions{
			Ctx:                opts.Ctx,
			ExpressionSelector: opts.ExpressionSelector,
		}

		filterNamespaces := resources.ResourceNamespaceList{}
		for _, ns := range watchNamespaces {
			// we do not want to filter out "" which equals all namespaces
			// the reason is because we will never create a watch on ""(all namespaces) because
			// doing so means we watch all resources regardless of namespace. Our intent is to
			// watch only certain namespaces.
			if ns != "" {
				filterNamespaces = append(filterNamespaces, resources.ResourceNamespace{Name: ns})
			}
		}
		namespacesResources, err := c.resourceNamespaceLister.GetResourceNamespaceList(namespaceListOptions, filterNamespaces)
		if err != nil {
			return nil, nil, err
		}
		// non watched namespaces that are labeled
		for _, resourceNamespace := range namespacesResources {
			namespace := resourceNamespace.Name
			c.artifact.RegisterNamespace(namespace)
			/* Setup namespaced watch for Artifact */
			{
				artifacts, err := c.artifact.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Artifact list")
				}
				initialArtifactList = append(initialArtifactList, artifacts...)
				artifactsByNamespace.Store(namespace, artifacts)
			}
			artifactNamespacesChan, artifactErrs, err := c.artifact.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Artifact watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, artifactErrs, namespace+"-artifacts")
			}(namespace)
			c.endpoint.RegisterNamespace(namespace)
			/* Setup namespaced watch for Endpoint */
			{
				endpoints, err := c.endpoint.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Endpoint list")
				}
				initialEndpointList = append(initialEndpointList, endpoints...)
				endpointsByNamespace.Store(namespace, endpoints)
			}
			endpointNamespacesChan, endpointErrs, err := c.endpoint.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Endpoint watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, endpointErrs, namespace+"-endpoints")
			}(namespace)
			c.proxy.RegisterNamespace(namespace)
			/* Setup namespaced watch for Proxy */
			{
				proxies, err := c.proxy.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Proxy list")
				}
				initialProxyList = append(initialProxyList, proxies...)
				proxiesByNamespace.Store(namespace, proxies)
			}
			proxyNamespacesChan, proxyErrs, err := c.proxy.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Proxy watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, proxyErrs, namespace+"-proxies")
			}(namespace)
			c.upstreamGroup.RegisterNamespace(namespace)
			/* Setup namespaced watch for UpstreamGroup */
			{
				upstreamGroups, err := c.upstreamGroup.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial UpstreamGroup list")
				}
				initialUpstreamGroupList = append(initialUpstreamGroupList, upstreamGroups...)
				upstreamGroupsByNamespace.Store(namespace, upstreamGroups)
			}
			upstreamGroupNamespacesChan, upstreamGroupErrs, err := c.upstreamGroup.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting UpstreamGroup watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, upstreamGroupErrs, namespace+"-upstreamGroups")
			}(namespace)
			c.secret.RegisterNamespace(namespace)
			/* Setup namespaced watch for Secret */
			{
				secrets, err := c.secret.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Secret list")
				}
				initialSecretList = append(initialSecretList, secrets...)
				secretsByNamespace.Store(namespace, secrets)
			}
			secretNamespacesChan, secretErrs, err := c.secret.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Secret watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, secretErrs, namespace+"-secrets")
			}(namespace)
			c.upstream.RegisterNamespace(namespace)
			/* Setup namespaced watch for Upstream */
			{
				upstreams, err := c.upstream.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Upstream list")
				}
				initialUpstreamList = append(initialUpstreamList, upstreams...)
				upstreamsByNamespace.Store(namespace, upstreams)
			}
			upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Upstream watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-upstreams")
			}(namespace)
			c.authConfig.RegisterNamespace(namespace)
			/* Setup namespaced watch for AuthConfig */
			{
				authConfigs, err := c.authConfig.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial AuthConfig list")
				}
				initialAuthConfigList = append(initialAuthConfigList, authConfigs...)
				authConfigsByNamespace.Store(namespace, authConfigs)
			}
			authConfigNamespacesChan, authConfigErrs, err := c.authConfig.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting AuthConfig watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, authConfigErrs, namespace+"-authConfigs")
			}(namespace)
			c.rateLimitConfig.RegisterNamespace(namespace)
			/* Setup namespaced watch for RateLimitConfig */
			{
				ratelimitconfigs, err := c.rateLimitConfig.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RateLimitConfig list")
				}
				initialRateLimitConfigList = append(initialRateLimitConfigList, ratelimitconfigs...)
				ratelimitconfigsByNamespace.Store(namespace, ratelimitconfigs)
			}
			rateLimitConfigNamespacesChan, rateLimitConfigErrs, err := c.rateLimitConfig.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RateLimitConfig watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, rateLimitConfigErrs, namespace+"-ratelimitconfigs")
			}(namespace)
			c.virtualService.RegisterNamespace(namespace)
			/* Setup namespaced watch for VirtualService */
			{
				virtualServices, err := c.virtualService.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial VirtualService list")
				}
				initialVirtualServiceList = append(initialVirtualServiceList, virtualServices...)
				virtualServicesByNamespace.Store(namespace, virtualServices)
			}
			virtualServiceNamespacesChan, virtualServiceErrs, err := c.virtualService.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting VirtualService watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, virtualServiceErrs, namespace+"-virtualServices")
			}(namespace)
			c.routeTable.RegisterNamespace(namespace)
			/* Setup namespaced watch for RouteTable */
			{
				routeTables, err := c.routeTable.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RouteTable list")
				}
				initialRouteTableList = append(initialRouteTableList, routeTables...)
				routeTablesByNamespace.Store(namespace, routeTables)
			}
			routeTableNamespacesChan, routeTableErrs, err := c.routeTable.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RouteTable watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, routeTableErrs, namespace+"-routeTables")
			}(namespace)
			c.gateway.RegisterNamespace(namespace)
			/* Setup namespaced watch for Gateway */
			{
				gateways, err := c.gateway.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial Gateway list")
				}
				initialGatewayList = append(initialGatewayList, gateways...)
				gatewaysByNamespace.Store(namespace, gateways)
			}
			gatewayNamespacesChan, gatewayErrs, err := c.gateway.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting Gateway watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, gatewayErrs, namespace+"-gateways")
			}(namespace)
			c.virtualHostOption.RegisterNamespace(namespace)
			/* Setup namespaced watch for VirtualHostOption */
			{
				virtualHostOptions, err := c.virtualHostOption.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial VirtualHostOption list")
				}
				initialVirtualHostOptionList = append(initialVirtualHostOptionList, virtualHostOptions...)
				virtualHostOptionsByNamespace.Store(namespace, virtualHostOptions)
			}
			virtualHostOptionNamespacesChan, virtualHostOptionErrs, err := c.virtualHostOption.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting VirtualHostOption watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, virtualHostOptionErrs, namespace+"-virtualHostOptions")
			}(namespace)
			c.routeOption.RegisterNamespace(namespace)
			/* Setup namespaced watch for RouteOption */
			{
				routeOptions, err := c.routeOption.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial RouteOption list")
				}
				initialRouteOptionList = append(initialRouteOptionList, routeOptions...)
				routeOptionsByNamespace.Store(namespace, routeOptions)
			}
			routeOptionNamespacesChan, routeOptionErrs, err := c.routeOption.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting RouteOption watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, routeOptionErrs, namespace+"-routeOptions")
			}(namespace)
			c.matchableHttpGateway.RegisterNamespace(namespace)
			/* Setup namespaced watch for MatchableHttpGateway */
			{
				httpGateways, err := c.matchableHttpGateway.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial MatchableHttpGateway list")
				}
				initialMatchableHttpGatewayList = append(initialMatchableHttpGatewayList, httpGateways...)
				httpGatewaysByNamespace.Store(namespace, httpGateways)
			}
			matchableHttpGatewayNamespacesChan, matchableHttpGatewayErrs, err := c.matchableHttpGateway.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting MatchableHttpGateway watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, matchableHttpGatewayErrs, namespace+"-httpGateways")
			}(namespace)
			c.graphQLApi.RegisterNamespace(namespace)
			/* Setup namespaced watch for GraphQLApi */
			{
				graphqlApis, err := c.graphQLApi.List(namespace, clients.ListOpts{Ctx: opts.Ctx})
				if err != nil {
					return nil, nil, errors.Wrapf(err, "initial GraphQLApi list")
				}
				initialGraphQLApiList = append(initialGraphQLApiList, graphqlApis...)
				graphqlApisByNamespace.Store(namespace, graphqlApis)
			}
			graphQLApiNamespacesChan, graphQLApiErrs, err := c.graphQLApi.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "starting GraphQLApi watch")
			}

			done.Add(1)
			go func(namespace string) {
				defer done.Done()
				errutils.AggregateErrs(ctx, errs, graphQLApiErrs, namespace+"-graphqlApis")
			}(namespace)
			/* Watch for changes and update snapshot */
			go func(namespace string) {
				for {
					select {
					case <-ctx.Done():
						return
					case artifactList, ok := <-artifactNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case artifactChan <- artifactListWithNamespace{list: artifactList, namespace: namespace}:
						}
					case endpointList, ok := <-endpointNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case endpointChan <- endpointListWithNamespace{list: endpointList, namespace: namespace}:
						}
					case proxyList, ok := <-proxyNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case proxyChan <- proxyListWithNamespace{list: proxyList, namespace: namespace}:
						}
					case upstreamGroupList, ok := <-upstreamGroupNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case upstreamGroupChan <- upstreamGroupListWithNamespace{list: upstreamGroupList, namespace: namespace}:
						}
					case secretList, ok := <-secretNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case secretChan <- secretListWithNamespace{list: secretList, namespace: namespace}:
						}
					case upstreamList, ok := <-upstreamNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
						}
					case authConfigList, ok := <-authConfigNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case authConfigChan <- authConfigListWithNamespace{list: authConfigList, namespace: namespace}:
						}
					case rateLimitConfigList, ok := <-rateLimitConfigNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case rateLimitConfigChan <- rateLimitConfigListWithNamespace{list: rateLimitConfigList, namespace: namespace}:
						}
					case virtualServiceList, ok := <-virtualServiceNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case virtualServiceChan <- virtualServiceListWithNamespace{list: virtualServiceList, namespace: namespace}:
						}
					case routeTableList, ok := <-routeTableNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case routeTableChan <- routeTableListWithNamespace{list: routeTableList, namespace: namespace}:
						}
					case gatewayList, ok := <-gatewayNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case gatewayChan <- gatewayListWithNamespace{list: gatewayList, namespace: namespace}:
						}
					case virtualHostOptionList, ok := <-virtualHostOptionNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case virtualHostOptionChan <- virtualHostOptionListWithNamespace{list: virtualHostOptionList, namespace: namespace}:
						}
					case routeOptionList, ok := <-routeOptionNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case routeOptionChan <- routeOptionListWithNamespace{list: routeOptionList, namespace: namespace}:
						}
					case matchableHttpGatewayList, ok := <-matchableHttpGatewayNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case matchableHttpGatewayChan <- matchableHttpGatewayListWithNamespace{list: matchableHttpGatewayList, namespace: namespace}:
						}
					case graphQLApiList, ok := <-graphQLApiNamespacesChan:
						if !ok {
							return
						}
						select {
						case <-ctx.Done():
							return
						case graphQLApiChan <- graphQLApiListWithNamespace{list: graphQLApiList, namespace: namespace}:
						}
					}
				}
			}(namespace)
		}
		// create watch on all namespaces, so that we can add all resources from new namespaces
		// we will be watching namespaces that meet the Expression Selector filter

		namespaceWatch, errsReceiver, err := c.resourceNamespaceLister.GetResourceNamespaceWatch(namespaceWatchOptions, filterNamespaces)
		if err != nil {
			return nil, nil, err
		}
		if errsReceiver != nil {
			go func() {
				for {
					select {
					case <-ctx.Done():
						return
					case err = <-errsReceiver:
						errs <- errors.Wrapf(err, "received error from watch on resource namespaces")
					}
				}
			}()
		}

		go func() {
			for {
				select {
				case <-ctx.Done():
					return
				case resourceNamespaces, ok := <-namespaceWatch:
					if !ok {
						return
					}
					// get the list of new namespaces, if there is a new namespace
					// get the list of resources from that namespace, and add
					// a watch for new resources created/deleted on that namespace
					c.updateNamespaces.Lock()

					// get the new namespaces, and get a map of the namespaces
					mapOfResourceNamespaces := make(map[string]bool, len(resourceNamespaces))
					newNamespaces := []string{}
					for _, ns := range resourceNamespaces {
						if _, hit := c.namespacesWatching.Load(ns.Name); !hit {
							newNamespaces = append(newNamespaces, ns.Name)
						}
						mapOfResourceNamespaces[ns.Name] = true
					}

					for _, ns := range watchNamespaces {
						mapOfResourceNamespaces[ns] = true
					}

					missingNamespaces := []string{}
					// use the map of namespace resources to find missing/deleted namespaces
					c.namespacesWatching.Range(func(key interface{}, value interface{}) bool {
						name := key.(string)
						if _, hit := mapOfResourceNamespaces[name]; !hit {
							missingNamespaces = append(missingNamespaces, name)
						}
						return true
					})

					for _, ns := range missingNamespaces {
						artifactChan <- artifactListWithNamespace{list: gloo_solo_io.ArtifactList{}, namespace: ns}
						endpointChan <- endpointListWithNamespace{list: gloo_solo_io.EndpointList{}, namespace: ns}
						proxyChan <- proxyListWithNamespace{list: gloo_solo_io.ProxyList{}, namespace: ns}
						upstreamGroupChan <- upstreamGroupListWithNamespace{list: gloo_solo_io.UpstreamGroupList{}, namespace: ns}
						secretChan <- secretListWithNamespace{list: gloo_solo_io.SecretList{}, namespace: ns}
						upstreamChan <- upstreamListWithNamespace{list: gloo_solo_io.UpstreamList{}, namespace: ns}
						authConfigChan <- authConfigListWithNamespace{list: enterprise_gloo_solo_io.AuthConfigList{}, namespace: ns}
						rateLimitConfigChan <- rateLimitConfigListWithNamespace{list: github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigList{}, namespace: ns}
						virtualServiceChan <- virtualServiceListWithNamespace{list: gateway_solo_io.VirtualServiceList{}, namespace: ns}
						routeTableChan <- routeTableListWithNamespace{list: gateway_solo_io.RouteTableList{}, namespace: ns}
						gatewayChan <- gatewayListWithNamespace{list: gateway_solo_io.GatewayList{}, namespace: ns}
						virtualHostOptionChan <- virtualHostOptionListWithNamespace{list: gateway_solo_io.VirtualHostOptionList{}, namespace: ns}
						routeOptionChan <- routeOptionListWithNamespace{list: gateway_solo_io.RouteOptionList{}, namespace: ns}
						matchableHttpGatewayChan <- matchableHttpGatewayListWithNamespace{list: gateway_solo_io.MatchableHttpGatewayList{}, namespace: ns}
						graphQLApiChan <- graphQLApiListWithNamespace{list: graphql_gloo_solo_io.GraphQLApiList{}, namespace: ns}
					}

					for _, namespace := range newNamespaces {
						c.artifact.RegisterNamespace(namespace)
						/* Setup namespaced watch for Artifact for new namespace */
						{
							artifacts, err := c.artifact.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Artifact list")
								continue
							}
							artifactsByNamespace.Store(namespace, artifacts)
						}
						artifactNamespacesChan, artifactErrs, err := c.artifact.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Artifact watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, artifactErrs, namespace+"-new-namespace-artifacts")
						}(namespace)
						c.endpoint.RegisterNamespace(namespace)
						/* Setup namespaced watch for Endpoint for new namespace */
						{
							endpoints, err := c.endpoint.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Endpoint list")
								continue
							}
							endpointsByNamespace.Store(namespace, endpoints)
						}
						endpointNamespacesChan, endpointErrs, err := c.endpoint.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Endpoint watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, endpointErrs, namespace+"-new-namespace-endpoints")
						}(namespace)
						c.proxy.RegisterNamespace(namespace)
						/* Setup namespaced watch for Proxy for new namespace */
						{
							proxies, err := c.proxy.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Proxy list")
								continue
							}
							proxiesByNamespace.Store(namespace, proxies)
						}
						proxyNamespacesChan, proxyErrs, err := c.proxy.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Proxy watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, proxyErrs, namespace+"-new-namespace-proxies")
						}(namespace)
						c.upstreamGroup.RegisterNamespace(namespace)
						/* Setup namespaced watch for UpstreamGroup for new namespace */
						{
							upstreamGroups, err := c.upstreamGroup.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace UpstreamGroup list")
								continue
							}
							upstreamGroupsByNamespace.Store(namespace, upstreamGroups)
						}
						upstreamGroupNamespacesChan, upstreamGroupErrs, err := c.upstreamGroup.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace UpstreamGroup watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, upstreamGroupErrs, namespace+"-new-namespace-upstreamGroups")
						}(namespace)
						c.secret.RegisterNamespace(namespace)
						/* Setup namespaced watch for Secret for new namespace */
						{
							secrets, err := c.secret.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Secret list")
								continue
							}
							secretsByNamespace.Store(namespace, secrets)
						}
						secretNamespacesChan, secretErrs, err := c.secret.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Secret watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, secretErrs, namespace+"-new-namespace-secrets")
						}(namespace)
						c.upstream.RegisterNamespace(namespace)
						/* Setup namespaced watch for Upstream for new namespace */
						{
							upstreams, err := c.upstream.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Upstream list")
								continue
							}
							upstreamsByNamespace.Store(namespace, upstreams)
						}
						upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Upstream watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-new-namespace-upstreams")
						}(namespace)
						c.authConfig.RegisterNamespace(namespace)
						/* Setup namespaced watch for AuthConfig for new namespace */
						{
							authConfigs, err := c.authConfig.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace AuthConfig list")
								continue
							}
							authConfigsByNamespace.Store(namespace, authConfigs)
						}
						authConfigNamespacesChan, authConfigErrs, err := c.authConfig.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace AuthConfig watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, authConfigErrs, namespace+"-new-namespace-authConfigs")
						}(namespace)
						c.rateLimitConfig.RegisterNamespace(namespace)
						/* Setup namespaced watch for RateLimitConfig for new namespace */
						{
							ratelimitconfigs, err := c.rateLimitConfig.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace RateLimitConfig list")
								continue
							}
							ratelimitconfigsByNamespace.Store(namespace, ratelimitconfigs)
						}
						rateLimitConfigNamespacesChan, rateLimitConfigErrs, err := c.rateLimitConfig.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace RateLimitConfig watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, rateLimitConfigErrs, namespace+"-new-namespace-ratelimitconfigs")
						}(namespace)
						c.virtualService.RegisterNamespace(namespace)
						/* Setup namespaced watch for VirtualService for new namespace */
						{
							virtualServices, err := c.virtualService.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace VirtualService list")
								continue
							}
							virtualServicesByNamespace.Store(namespace, virtualServices)
						}
						virtualServiceNamespacesChan, virtualServiceErrs, err := c.virtualService.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace VirtualService watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, virtualServiceErrs, namespace+"-new-namespace-virtualServices")
						}(namespace)
						c.routeTable.RegisterNamespace(namespace)
						/* Setup namespaced watch for RouteTable for new namespace */
						{
							routeTables, err := c.routeTable.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace RouteTable list")
								continue
							}
							routeTablesByNamespace.Store(namespace, routeTables)
						}
						routeTableNamespacesChan, routeTableErrs, err := c.routeTable.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace RouteTable watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, routeTableErrs, namespace+"-new-namespace-routeTables")
						}(namespace)
						c.gateway.RegisterNamespace(namespace)
						/* Setup namespaced watch for Gateway for new namespace */
						{
							gateways, err := c.gateway.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace Gateway list")
								continue
							}
							gatewaysByNamespace.Store(namespace, gateways)
						}
						gatewayNamespacesChan, gatewayErrs, err := c.gateway.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace Gateway watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, gatewayErrs, namespace+"-new-namespace-gateways")
						}(namespace)
						c.virtualHostOption.RegisterNamespace(namespace)
						/* Setup namespaced watch for VirtualHostOption for new namespace */
						{
							virtualHostOptions, err := c.virtualHostOption.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace VirtualHostOption list")
								continue
							}
							virtualHostOptionsByNamespace.Store(namespace, virtualHostOptions)
						}
						virtualHostOptionNamespacesChan, virtualHostOptionErrs, err := c.virtualHostOption.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace VirtualHostOption watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, virtualHostOptionErrs, namespace+"-new-namespace-virtualHostOptions")
						}(namespace)
						c.routeOption.RegisterNamespace(namespace)
						/* Setup namespaced watch for RouteOption for new namespace */
						{
							routeOptions, err := c.routeOption.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace RouteOption list")
								continue
							}
							routeOptionsByNamespace.Store(namespace, routeOptions)
						}
						routeOptionNamespacesChan, routeOptionErrs, err := c.routeOption.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace RouteOption watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, routeOptionErrs, namespace+"-new-namespace-routeOptions")
						}(namespace)
						c.matchableHttpGateway.RegisterNamespace(namespace)
						/* Setup namespaced watch for MatchableHttpGateway for new namespace */
						{
							httpGateways, err := c.matchableHttpGateway.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace MatchableHttpGateway list")
								continue
							}
							httpGatewaysByNamespace.Store(namespace, httpGateways)
						}
						matchableHttpGatewayNamespacesChan, matchableHttpGatewayErrs, err := c.matchableHttpGateway.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace MatchableHttpGateway watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, matchableHttpGatewayErrs, namespace+"-new-namespace-httpGateways")
						}(namespace)
						c.graphQLApi.RegisterNamespace(namespace)
						/* Setup namespaced watch for GraphQLApi for new namespace */
						{
							graphqlApis, err := c.graphQLApi.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
							if err != nil {
								errs <- errors.Wrapf(err, "initial new namespace GraphQLApi list")
								continue
							}
							graphqlApisByNamespace.Store(namespace, graphqlApis)
						}
						graphQLApiNamespacesChan, graphQLApiErrs, err := c.graphQLApi.Watch(namespace, clients.WatchOpts{Ctx: opts.Ctx, Selector: opts.Selector})
						if err != nil {
							errs <- errors.Wrapf(err, "starting new namespace GraphQLApi watch")
							continue
						}

						done.Add(1)
						go func(namespace string) {
							defer done.Done()
							errutils.AggregateErrs(ctx, errs, graphQLApiErrs, namespace+"-new-namespace-graphqlApis")
						}(namespace)
						/* Watch for changes and update snapshot */
						go func(namespace string) {
							defer func() {
								c.namespacesWatching.Delete(namespace)
							}()
							c.namespacesWatching.Store(namespace, true)
							for {
								select {
								case <-ctx.Done():
									return
								case artifactList, ok := <-artifactNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case artifactChan <- artifactListWithNamespace{list: artifactList, namespace: namespace}:
									}
								case endpointList, ok := <-endpointNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case endpointChan <- endpointListWithNamespace{list: endpointList, namespace: namespace}:
									}
								case proxyList, ok := <-proxyNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case proxyChan <- proxyListWithNamespace{list: proxyList, namespace: namespace}:
									}
								case upstreamGroupList, ok := <-upstreamGroupNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case upstreamGroupChan <- upstreamGroupListWithNamespace{list: upstreamGroupList, namespace: namespace}:
									}
								case secretList, ok := <-secretNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case secretChan <- secretListWithNamespace{list: secretList, namespace: namespace}:
									}
								case upstreamList, ok := <-upstreamNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
									}
								case authConfigList, ok := <-authConfigNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case authConfigChan <- authConfigListWithNamespace{list: authConfigList, namespace: namespace}:
									}
								case rateLimitConfigList, ok := <-rateLimitConfigNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case rateLimitConfigChan <- rateLimitConfigListWithNamespace{list: rateLimitConfigList, namespace: namespace}:
									}
								case virtualServiceList, ok := <-virtualServiceNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case virtualServiceChan <- virtualServiceListWithNamespace{list: virtualServiceList, namespace: namespace}:
									}
								case routeTableList, ok := <-routeTableNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case routeTableChan <- routeTableListWithNamespace{list: routeTableList, namespace: namespace}:
									}
								case gatewayList, ok := <-gatewayNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case gatewayChan <- gatewayListWithNamespace{list: gatewayList, namespace: namespace}:
									}
								case virtualHostOptionList, ok := <-virtualHostOptionNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case virtualHostOptionChan <- virtualHostOptionListWithNamespace{list: virtualHostOptionList, namespace: namespace}:
									}
								case routeOptionList, ok := <-routeOptionNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case routeOptionChan <- routeOptionListWithNamespace{list: routeOptionList, namespace: namespace}:
									}
								case matchableHttpGatewayList, ok := <-matchableHttpGatewayNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case matchableHttpGatewayChan <- matchableHttpGatewayListWithNamespace{list: matchableHttpGatewayList, namespace: namespace}:
									}
								case graphQLApiList, ok := <-graphQLApiNamespacesChan:
									if !ok {
										return
									}
									select {
									case <-ctx.Done():
										return
									case graphQLApiChan <- graphQLApiListWithNamespace{list: graphQLApiList, namespace: namespace}:
									}
								}
							}
						}(namespace)
					}
					c.updateNamespaces.Unlock()
				}
			}
		}()
	}
	/* Initialize snapshot for Artifacts */
	currentSnapshot.Artifacts = initialArtifactList.Sort()
	/* Initialize snapshot for Endpoints */
	currentSnapshot.Endpoints = initialEndpointList.Sort()
	/* Initialize snapshot for Proxies */
	currentSnapshot.Proxies = initialProxyList.Sort()
	/* Initialize snapshot for UpstreamGroups */
	currentSnapshot.UpstreamGroups = initialUpstreamGroupList.Sort()
	/* Initialize snapshot for Secrets */
	currentSnapshot.Secrets = initialSecretList.Sort()
	/* Initialize snapshot for Upstreams */
	currentSnapshot.Upstreams = initialUpstreamList.Sort()
	/* Initialize snapshot for AuthConfigs */
	currentSnapshot.AuthConfigs = initialAuthConfigList.Sort()
	/* Initialize snapshot for Ratelimitconfigs */
	currentSnapshot.Ratelimitconfigs = initialRateLimitConfigList.Sort()
	/* Initialize snapshot for VirtualServices */
	currentSnapshot.VirtualServices = initialVirtualServiceList.Sort()
	/* Initialize snapshot for RouteTables */
	currentSnapshot.RouteTables = initialRouteTableList.Sort()
	/* Initialize snapshot for Gateways */
	currentSnapshot.Gateways = initialGatewayList.Sort()
	/* Initialize snapshot for VirtualHostOptions */
	currentSnapshot.VirtualHostOptions = initialVirtualHostOptionList.Sort()
	/* Initialize snapshot for RouteOptions */
	currentSnapshot.RouteOptions = initialRouteOptionList.Sort()
	/* Initialize snapshot for HttpGateways */
	currentSnapshot.HttpGateways = initialMatchableHttpGatewayList.Sort()
	/* Initialize snapshot for GraphqlApis */
	currentSnapshot.GraphqlApis = initialGraphQLApiList.Sort()

	snapshots := make(chan *ApiSnapshot)
	go func() {
		// sent initial snapshot to kick off the watch
		initialSnapshot := currentSnapshot.Clone()
		snapshots <- &initialSnapshot

		timer := time.NewTicker(time.Second * 1)
		previousHash, err := currentSnapshot.Hash(nil)
		if err != nil {
			contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
		}
		sync := func() {
			currentHash, err := currentSnapshot.Hash(nil)
			// this should never happen, so panic if it does
			if err != nil {
				contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
			}
			if previousHash == currentHash {
				return
			}

			sentSnapshot := currentSnapshot.Clone()
			select {
			case snapshots <- &sentSnapshot:
				stats.Record(ctx, mApiSnapshotOut.M(1))
				previousHash = currentHash
			default:
				stats.Record(ctx, mApiSnapshotMissed.M(1))
			}
		}

		defer func() {
			close(snapshots)
			// we must wait for done before closing the error chan,
			// to avoid sending on close channel.
			done.Wait()
			close(errs)
		}()
		for {
			record := func() { stats.Record(ctx, mApiSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case artifactNamespacedList, ok := <-artifactChan:
				if !ok {
					return
				}
				record()

				namespace := artifactNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"artifact",
					mApiResourcesIn,
				)

				// merge lists by namespace
				artifactsByNamespace.Store(namespace, artifactNamespacedList.list)
				var artifactList gloo_solo_io.ArtifactList
				artifactsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.ArtifactList)
					artifactList = append(artifactList, mocks...)
					return true
				})
				currentSnapshot.Artifacts = artifactList.Sort()
			case endpointNamespacedList, ok := <-endpointChan:
				if !ok {
					return
				}
				record()

				namespace := endpointNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"endpoint",
					mApiResourcesIn,
				)

				// merge lists by namespace
				endpointsByNamespace.Store(namespace, endpointNamespacedList.list)
				var endpointList gloo_solo_io.EndpointList
				endpointsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.EndpointList)
					endpointList = append(endpointList, mocks...)
					return true
				})
				currentSnapshot.Endpoints = endpointList.Sort()
			case proxyNamespacedList, ok := <-proxyChan:
				if !ok {
					return
				}
				record()

				namespace := proxyNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"proxy",
					mApiResourcesIn,
				)

				// merge lists by namespace
				proxiesByNamespace.Store(namespace, proxyNamespacedList.list)
				var proxyList gloo_solo_io.ProxyList
				proxiesByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.ProxyList)
					proxyList = append(proxyList, mocks...)
					return true
				})
				currentSnapshot.Proxies = proxyList.Sort()
			case upstreamGroupNamespacedList, ok := <-upstreamGroupChan:
				if !ok {
					return
				}
				record()

				namespace := upstreamGroupNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"upstream_group",
					mApiResourcesIn,
				)

				// merge lists by namespace
				upstreamGroupsByNamespace.Store(namespace, upstreamGroupNamespacedList.list)
				var upstreamGroupList gloo_solo_io.UpstreamGroupList
				upstreamGroupsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.UpstreamGroupList)
					upstreamGroupList = append(upstreamGroupList, mocks...)
					return true
				})
				currentSnapshot.UpstreamGroups = upstreamGroupList.Sort()
			case secretNamespacedList, ok := <-secretChan:
				if !ok {
					return
				}
				record()

				namespace := secretNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"secret",
					mApiResourcesIn,
				)

				// merge lists by namespace
				secretsByNamespace.Store(namespace, secretNamespacedList.list)
				var secretList gloo_solo_io.SecretList
				secretsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.SecretList)
					secretList = append(secretList, mocks...)
					return true
				})
				currentSnapshot.Secrets = secretList.Sort()
			case upstreamNamespacedList, ok := <-upstreamChan:
				if !ok {
					return
				}
				record()

				namespace := upstreamNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"upstream",
					mApiResourcesIn,
				)

				// merge lists by namespace
				upstreamsByNamespace.Store(namespace, upstreamNamespacedList.list)
				var upstreamList gloo_solo_io.UpstreamList
				upstreamsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gloo_solo_io.UpstreamList)
					upstreamList = append(upstreamList, mocks...)
					return true
				})
				currentSnapshot.Upstreams = upstreamList.Sort()
			case authConfigNamespacedList, ok := <-authConfigChan:
				if !ok {
					return
				}
				record()

				namespace := authConfigNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"auth_config",
					mApiResourcesIn,
				)

				// merge lists by namespace
				authConfigsByNamespace.Store(namespace, authConfigNamespacedList.list)
				var authConfigList enterprise_gloo_solo_io.AuthConfigList
				authConfigsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(enterprise_gloo_solo_io.AuthConfigList)
					authConfigList = append(authConfigList, mocks...)
					return true
				})
				currentSnapshot.AuthConfigs = authConfigList.Sort()
			case rateLimitConfigNamespacedList, ok := <-rateLimitConfigChan:
				if !ok {
					return
				}
				record()

				namespace := rateLimitConfigNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"rate_limit_config",
					mApiResourcesIn,
				)

				// merge lists by namespace
				ratelimitconfigsByNamespace.Store(namespace, rateLimitConfigNamespacedList.list)
				var rateLimitConfigList github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigList
				ratelimitconfigsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(github_com_solo_io_gloo_projects_gloo_pkg_api_external_solo_ratelimit.RateLimitConfigList)
					rateLimitConfigList = append(rateLimitConfigList, mocks...)
					return true
				})
				currentSnapshot.Ratelimitconfigs = rateLimitConfigList.Sort()
			case virtualServiceNamespacedList, ok := <-virtualServiceChan:
				if !ok {
					return
				}
				record()

				namespace := virtualServiceNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"virtual_service",
					mApiResourcesIn,
				)

				// merge lists by namespace
				virtualServicesByNamespace.Store(namespace, virtualServiceNamespacedList.list)
				var virtualServiceList gateway_solo_io.VirtualServiceList
				virtualServicesByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.VirtualServiceList)
					virtualServiceList = append(virtualServiceList, mocks...)
					return true
				})
				currentSnapshot.VirtualServices = virtualServiceList.Sort()
			case routeTableNamespacedList, ok := <-routeTableChan:
				if !ok {
					return
				}
				record()

				namespace := routeTableNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"route_table",
					mApiResourcesIn,
				)

				// merge lists by namespace
				routeTablesByNamespace.Store(namespace, routeTableNamespacedList.list)
				var routeTableList gateway_solo_io.RouteTableList
				routeTablesByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.RouteTableList)
					routeTableList = append(routeTableList, mocks...)
					return true
				})
				currentSnapshot.RouteTables = routeTableList.Sort()
			case gatewayNamespacedList, ok := <-gatewayChan:
				if !ok {
					return
				}
				record()

				namespace := gatewayNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"gateway",
					mApiResourcesIn,
				)

				// merge lists by namespace
				gatewaysByNamespace.Store(namespace, gatewayNamespacedList.list)
				var gatewayList gateway_solo_io.GatewayList
				gatewaysByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.GatewayList)
					gatewayList = append(gatewayList, mocks...)
					return true
				})
				currentSnapshot.Gateways = gatewayList.Sort()
			case virtualHostOptionNamespacedList, ok := <-virtualHostOptionChan:
				if !ok {
					return
				}
				record()

				namespace := virtualHostOptionNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"virtual_host_option",
					mApiResourcesIn,
				)

				// merge lists by namespace
				virtualHostOptionsByNamespace.Store(namespace, virtualHostOptionNamespacedList.list)
				var virtualHostOptionList gateway_solo_io.VirtualHostOptionList
				virtualHostOptionsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.VirtualHostOptionList)
					virtualHostOptionList = append(virtualHostOptionList, mocks...)
					return true
				})
				currentSnapshot.VirtualHostOptions = virtualHostOptionList.Sort()
			case routeOptionNamespacedList, ok := <-routeOptionChan:
				if !ok {
					return
				}
				record()

				namespace := routeOptionNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"route_option",
					mApiResourcesIn,
				)

				// merge lists by namespace
				routeOptionsByNamespace.Store(namespace, routeOptionNamespacedList.list)
				var routeOptionList gateway_solo_io.RouteOptionList
				routeOptionsByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.RouteOptionList)
					routeOptionList = append(routeOptionList, mocks...)
					return true
				})
				currentSnapshot.RouteOptions = routeOptionList.Sort()
			case matchableHttpGatewayNamespacedList, ok := <-matchableHttpGatewayChan:
				if !ok {
					return
				}
				record()

				namespace := matchableHttpGatewayNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"matchable_http_gateway",
					mApiResourcesIn,
				)

				// merge lists by namespace
				httpGatewaysByNamespace.Store(namespace, matchableHttpGatewayNamespacedList.list)
				var matchableHttpGatewayList gateway_solo_io.MatchableHttpGatewayList
				httpGatewaysByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(gateway_solo_io.MatchableHttpGatewayList)
					matchableHttpGatewayList = append(matchableHttpGatewayList, mocks...)
					return true
				})
				currentSnapshot.HttpGateways = matchableHttpGatewayList.Sort()
			case graphQLApiNamespacedList, ok := <-graphQLApiChan:
				if !ok {
					return
				}
				record()

				namespace := graphQLApiNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"graph_ql_api",
					mApiResourcesIn,
				)

				// merge lists by namespace
				graphqlApisByNamespace.Store(namespace, graphQLApiNamespacedList.list)
				var graphQLApiList graphql_gloo_solo_io.GraphQLApiList
				graphqlApisByNamespace.Range(func(key interface{}, value interface{}) bool {
					mocks := value.(graphql_gloo_solo_io.GraphQLApiList)
					graphQLApiList = append(graphQLApiList, mocks...)
					return true
				})
				currentSnapshot.GraphqlApis = graphQLApiList.Sort()
			}
		}
	}()
	return snapshots, errs, nil
}
